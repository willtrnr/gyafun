;; First task of any compiler, compile itself

;; Investigate import statements

;; Native functions (and cheats :P)
io.printf: native
io.fopen: native
io.freadline: native
io.fclose: native
regex.compile: native
regex.match: native
regex.replace: native
regex.split: native
str.substr: native
str.unescape: native
int.to_bytes: native
pickle.dump: native

;; Sizes
op_byte_size: 1
arg_byte_size: 2

;; Statement type enum
stmt_const: 0x01
stmt_label: 0x02
stmt_inst: 0x03

;; Arg type enum
arg_literal: 0x01
arg_ident: 0x02

;; Const type enum
const_code: 0x01
const_value: 0x02
const_symbol: 0x03

;; Stmt Structure
stmt_type_idx: 0

stmt_const_size: 4
stmt_const_name_idx: 1
stmt_const_type_idx: 2
stmt_const_value_idx: 3

stmt_label_size: 2
stmt_label_name_idx: 1

stmt_inst_size: 3
stmt_inst_op_idx: 1
stmt_inst_args_idx: 2

;; Const Structure
const_size: 3
const_type_idx: 0
const_id_idx: 1
const_value_idx: 2

;; Arg structure
arg_size: 3
arg_type_idx: 0
arg_value_idx: 1

;; Useful
empty_str: ""
cash: 0x24 ; $
dot: 0x2E ; .

main:

  $argc 0
  $argv 1

  $ops 2
  $code_pool 3
  $const_pool 4
  $output 5

  $idx 6

  ;; Check if we have enough arguments
  LDL $argc
  .min_args: 2
  LDC .min_args
  ILT .show_usage

  ;; Parse ops from python file (a little hacky)
  IVK parse_opcodes 0
  STL $ops

  ;; Setup a shared constant pool
  MNW
  STL $code_pool
  MNW
  STL $const_pool

  LD0
  ANW
  STL $output

  ST1 $idx
  .loop:
    LDL $idx
    LDL $argc
    IEQ .end

    LDL $argv
    LDL $idx
    ALD
    .mode: "r"
    LDC .mode
    IVK io.fopen 2
    DUP
    IIN .error_not_open
    DUP
    LDL $output
    SWP
    IVK read_lines 1
    IVK read_statements 1

    LDL $ops
    LDL $code_pool
    LDL $const_pool
    IVK assemble 4

    ADD ; Overloaded, assuming Python

    STL $output

    IVK io.fclose 1
    POP

    LDL $idx
    INC 1
    STL $idx

    JMP .loop
  .end:

  .aout: "aa.out"
  LDC .aout
  .aout_mode: "w"
  LDC .aout_mode
  IVK io.fopen 2
  DUP
  LDL $output
  SWP
  IVK pickle.dump 2
  POP
  IVK io.fclose 1
  POP

  LD0
  RET

  .show_usage:
    .usage: "Usage: %s <FILE> [FILE [FILE [...]]]\n"
    LDC .usage
    LDL $argv
    LD0
    ALD
    IVK io.printf 2
    POP
    LD1
    RET

  .error_not_open:
    .open_error: "%s: File not found or not readable\n"
    LDC .open_error
    LDL $argv
    LDL $idx
    ALD
    IVK io.printf 2
    RET

parse_opcodes:

  $ops 0
  $file 1
  $pattern 2

  MNW
  STL $ops

  .opcodes_py: "opcodes.py"
  LDC .opcodes_py
  .mode: "r"
  LDC .mode
  IVK io.fopen 2
  STL $file

  .op_pattern: "^OP_([A-Z][A-Z0-9]*) = 0x([0-9A-Fa-f]+)"
  LDC .op_pattern
  IVK regex.compile 1
  STL $pattern

  .loop:
    $loop_line 3
    $match 4

    LDL $file
    IVK io.freadline 1
    DUP
    STL $loop_line
    IIN .end

    LDL $pattern
    LDL $loop_line
    IVK regex.match 2
    DUP
    STL $match
    IIN .loop

    LDL $ops

    LDL $match
    LD1
    ALD

    LDL $match
    .val_idx: 2
    LDC .val_idx
    ALD
    LD0
    LDL $match
    LDC .val_idx
    ALD
    ASZ
    IVK parse_hex 3

    MST

    JMP .loop
  .end:

  LDL $ops
  RET

read_lines:

  $file 0

  $buf 1

  LD0
  ANW
  STL $buf

  .loop:
    LDL $buf

    LDL $file
    IVK io.freadline 1
    DUP

    IIN .end

    APS

    JMP .loop
  .end:
  POP

  RET

parse_literal:

  .c0: 0x30
  .cx: 0x78
  .ch: 0x68
  .cd: 0x64

  $value 0

  $res 1
  $idx 2

  LDL $value
  ASZ
  LD0
  IEQ .error

  .try_0x:
    LDL $value
    ASZ
    .min_length_0x: 3
    LDC .min_length_0x
    ILT .try_h

    LDL $value
    LD0
    ALD
    LDC .c0
    INE .try_h

    LDL $value
    LD1
    ALD
    LDC .cx
    INE .try_h

    LDL $value
    .offset_0x: 2
    LDC .offset_0x
    LDL $value
    ASZ
    IVK parse_hex 3
    RET

  .try_h:
    LDL $value
    DUP
    ASZ
    DEC 1
    ALD
    LDC .ch
    INE .try_d

    LDL $value
    LD0
    LDL $value
    ASZ
    DEC 1
    IVK parse_hex 3
    RET

  .try_d:
    LDL $value
    DUP
    ASZ
    DEC 1
    ALD
    LDC .cd
    INE .try_int

    LDL $value
    LD0
    LDL $value
    ASZ
    DEC 1
    IVK parse_int 3
    RET

  .try_int:
    LDL $value
    LD0
    LDL $value
    ASZ
    IVK parse_int 3
    RET

  .error:
    LDN
    RET

parse_arg:

  .arg_size: 2

  $value 0
  $aliases 1

  LDL $value
  ASZ
  LD0
  IEQ .error

  .try_alias:
    LDL $value
    LD0
    ALD
    LDC cash
    INE .try_literal

    LDL $aliases
    LDL $value
    LD1
    LDL $value
    ASZ
    IVK str.substr 3
    MLD

    RET

  .try_literal:
    LDL $value
    IVK parse_literal 1
    DUP
    IIN .try_ident
    DUP

    STL $value
    LDC arg_literal
    LDL $value
    TNW 2

    RET

  .try_ident:
    LDC arg_ident
    LDL $value
    TNW 2

    RET

  .error:
    LDN
    RET

read_statements:

  $lines 0

  $stmts 1
  $aliases 2
  $ws_pattern 3
  $trim_pattern 4
  $const_pattern 5
  $label_pattern 6
  $alias_pattern 7
  $inst_pattern 8
  $idx 9
  $line 10
  $match 11
  $sub_idx 12

  LD0
  ANW
  STL $stmts

  MNW
  STL $aliases

  .trim_pattern: "^\\s+|\\s+$"
  LDC .trim_pattern
  IVK regex.compile 1
  STL $trim_pattern

  .ws_pattern: "\\s+"
  LDC .ws_pattern
  IVK regex.compile 1
  STL $ws_pattern

  .const_pattern: "^(\\.?[A-Za-z_][A-Za-z0-9_\\.\\$\\-]*):\\s+(?:(native(?:\\s+(\\.?[A-Za-z_][A-Za-z0-9_\\.\\$\\-]*))?)|(0x[0-9A-Fa-f]+|[0-9A-Fa-f]+h|[0-9]+d?)|(?:\"((?:\\\\\"|.)*?)"))\\s*(?:;.*)?$"
  LDC .const_pattern
  IVK regex.compile 1
  STL $const_pattern

  .label_pattern: "^(\\.?[A-Za-z_][A-Za-z0-9_\\.\\$\\-]*):\\s*(?:;.*)?$"
  LDC .label_pattern
  IVK regex.compile 1
  STL $label_pattern

  .alias_pattern: "^\\$(\\.?[A-Za-z_][A-Za-z0-9_\\.\\$\\-]*)\\s+(0x[0-9A-Fa-f]+|[0-9A-Fa-f]+h|[0-9]+d?|\\.?[A-Za-z_][A-Za-z0-9_\\.\\$\\-]*)\\s*(?:;.*)?$"
  LDC .alias_pattern
  IVK regex.compile 1
  STL $alias_pattern

  .inst_pattern: "^(\\.?[A-Za-z_][A-Za-z0-9_\\.\\$\\-]*)((?:\\s+(?:0x[0-9A-Fa-f]+|[0-9A-Fa-f]+h|[0-9]+d?|\\$?\\.?[A-Za-z_][A-Za-z0-9_\\.\\$\\-]*))*)\\s*(?:;.*)?$"
  LDC .inst_pattern
  IVK regex.compile 1
  STL $inst_pattern

  ST0 $idx

  .loop:
    LDL $lines
    ASZ
    LDL $idx
    IEQ .end

    LDL $lines
    LDL $idx
    ALD
    STL $line

    LDL $trim_pattern
    LDL $line
    LDC empty_str
    IVK regex.replace 3
    STL $line

    .try_const:
      LDL $const_pattern
      LDL $line
      IVK regex.match 2
      STL $match

      LDL $match
      IIN .try_label

      LDL $stmts

      LDC stmt_const_size
      ANW

      DUP
      LDC stmt_type_idx
      LDC stmt_const
      AST

      DUP
      LDC stmt_const_name_idx
      LDL $match
      LD1
      ALD
      AST

      .try_const_code:
        .const_code_size: 2
        .const_code_native_idx: 2
        .const_code_name_idx: 3

        LDL $match
        LDC .const_code_native_idx
        ALD
        IIN .try_const_int

        DUP
        LDC stmt_const_type_idx
        LDC const_code
        AST

        DUP
        LDC stmt_const_value_idx

        ;; FIXME this should produce tuple, not list
        LDC .const_code_size
        ANW

        DUP
        LD0
        LD1
        AST

        DUP
        LD1
        LDL $match
        LDC .const_code_name_idx
        ALD
        DUP
        INN .const_code_has_name
          POP
          LDL $match
          LD1
          ALD
        .const_code_has_name:
        AST

        AST

        APS

        JMP .next

      .try_const_int:
        .const_int_idx: 4

        LDL $match
        LDC .const_int_idx
        ALD
        IIN .try_const_string

        DUP
        LDC stmt_const_type_idx
        LDC const_value
        AST

        DUP
        LDC stmt_const_value_idx
        LDL $match
        LDC .const_int_idx
        ALD
        IVK parse_literal 1
        AST

        APS

        JMP .next

      .try_const_string:
        .const_string_idx: 5

        LDL $match
        LDC .const_string_idx
        ALD
        IIN .next

        DUP
        LDC stmt_const_type_idx
        LDC const_value
        AST

        DUP
        LDC stmt_const_value_idx
        LDL $match
        LDC .const_string_idx
        ALD
        IVK str.unescape 1
        AST

        APS

        JMP .next

    .try_label:
      LDL $label_pattern
      LDL $line
      IVK regex.match 2
      STL $match

      LDL $match
      IIN .try_alias

      LDL $stmts

      LDC stmt_label_size
      ANW

      DUP
      LDC stmt_type_idx
      LDC stmt_label
      AST

      DUP
      LDC stmt_label_name_idx
      LDL $match
      LD1
      ALD
      AST

      APS

      JMP .next

    .try_alias:
      .alias_value_idx: 2

      LDL $alias_pattern
      LDL $line
      IVK regex.match 2
      STL $match

      LDL $match
      IIN .try_inst

      LDL $aliases

      LDL $match
      LD1
      ALD

      LDL $match
      LDC .alias_value_idx
      ALD
      LDL $aliases
      IVK parse_arg 2

      MST

      JMP .next

    .try_inst:
      .inst_args_idx: 2

      LDL $inst_pattern
      LDL $line
      IVK regex.match 2
      STL $match

      LDL $match
      IIN .next

      LDL $stmts

      LDC stmt_inst_size
      ANW

      DUP
      LDC stmt_type_idx
      LDC stmt_inst
      AST

      DUP
      LDC stmt_inst_op_idx
      LDL $match
      LD1
      ALD
      AST

      DUP
      LDC stmt_inst_args_idx

      LDL $match
      LDC .inst_args_idx
      ALD
      ASZ
      LD0
      IEQ .inst_no_args
        LDL $ws_pattern
        LDL $trim_pattern
        LDL $match
        LDC .inst_args_idx
        ALD
        LDC empty_str
        IVK regex.replace 3
        IVK regex.split 2

        LD0
        STL $sub_idx
        .inst_args_loop:
          DUP
          ASZ
          LDL $sub_idx
          IEQ .inst_args_end

          DUP
          DUP
          LDL $sub_idx
          ALD
          LDL $aliases
          IVK parse_arg 2
          LDL $sub_idx
          SWP
          AST

          LDL $sub_idx
          INC 1
          STL $sub_idx

          JMP .inst_args_loop
        .inst_args_end:

        JMP .inst_no_args_end
      .inst_no_args:
        LD0
        ANW
      .inst_no_args_end:
      AST

      APS

      JMP .next

    .next:

    LDL $idx
    INC 1
    STL $idx

    JMP .loop
  .end:

  LDL $stmts
  RET

assemble:

  $stmts 0
  $ops 1
  $code_pool 2
  $const_pool 3

  $output 4
  $labels 5
  $symbols 6
  $current 7
  $pos 8
  $idx 9
  $subidx 10
  $name 11
  $buffer 12

  LD0
  ANW
  STL $output

  MNW
  STL $labels

  MNW
  STL $symbols

  STN $current

  ST0 $pos
  ST0 $idx
  .first_loop:
    LDL $idx
    LDL $stmts
    ASZ
    IEQ .first_end

    LDL $stmts
    LDL $idx
    ALD

    DUP
    LDC stmt_type_idx
    ALD

    DUP
    LDC stmt_const
    IEQ .first_is_const

    DUP
    LDC stmt_label
    IEQ .first_is_label

    DUP
    LDC stmt_inst
    IEQ .first_is_inst

    JMP .first_next

    .first_is_const:
      POP

      DUP
      LDC stmt_const_type_idx
      ALD

      DUP
      LDC const_code
      IEQ .first_is_const_code

      DUP
      LDC const_value
      IEQ .first_is_const_value

      POP

      JMP .first_next

      .first_is_const_code:
        POP

        DUP
        LDL $code_pool
        SWP
        LDC stmt_const_name_idx
        ALD
        MCT
        INZ .first_next

        DUP
        LDL $output
        SWP
        LDC const_code
        LDL $code_pool
        MSZ
        TNW 2
        SWP
        LDC stmt_const_value_idx
        ALD
        TNW 2
        APS

        DUP
        LDL $code_pool
        SWP
        LDC stmt_const_name_idx
        ALD
        LDL $code_pool
        MSZ
        MST

        JMP .first_next

      .first_is_const_value:
        POP

        DUP
        LDC stmt_const_name_idx
        ALD
        STL $name

        LDL $name
        LD0
        ALD
        LDC dot
        INE .first_is_const_name_ok
          LDL $current
          LDL $name
          TNW 2
          STL $name
        .first_is_const_name_ok:

        LDL $const_pool
        LDL $name
        MCT
        INZ .first_next

        DUP
        LDL $output
        SWP
        LDC const_value
        LDL $const_pool
        MSZ
        TNW 2
        SWP
        LDC stmt_const_value_idx
        ALD
        TNW 2
        APS

        LDL $const_pool
        LDL $name
        LDL $const_pool
        MSZ
        MST

        JMP .first_next

    .first_is_label:
      POP

      DUP
      LDC stmt_label_name_idx
      ALD
      LD0
      ALD
      LDC dot
      IEQ .first_is_label_local
        ST0 $pos

        DUP
        LDC stmt_label_name_idx
        ALD
        STL $current

        LDL $symbols
        LDL $current
        LD0
        ANW
        MST

        LDL $code_pool
        LDL $current
        MCT
        INZ .first_next

        LDL $code_pool
        LDL $current
        LDL $code_pool
        MSZ
        MST

        JMP .first_next

      .first_is_label_local:

        DUP
        LDL $labels
        SWP
        LDL $current
        SWP
        LDC stmt_label_name_idx
        ALD
        TNW 2
        LDL $pos
        MST

        JMP .first_next

    .first_is_inst:
      POP

      DUP
      LDL $symbols
      LDL $current
      MLD
      SWP

      DUP
      LDL $ops
      SWP
      LDC stmt_inst_op_idx
      ALD
      MLD
      SWP
      LDC stmt_inst_args_idx
      ALD
      TNW 2

      APS

      DUP
      LDL $pos
      INC 1
      SWP
      LDC stmt_inst_args_idx
      ALD
      ASZ
      LDC arg_byte_size
      MUL
      ADD
      STL $pos

      JMP .first_next

    .first_next:
      POP

      LDL $idx
      INC 1
      STL $idx

      JMP .first_loop
  .first_end:

  LDL $symbols
  MKY
  ST0 $idx
  .scnd_loop:
    DUP
    ASZ
    LDL $idx
    IEQ .scnd_end

    DUP
    LDL $idx
    ALD
    STL $current

    LDL $symbols
    LDL $current
    MLD

    STN $buffer
    ST0 $subidx
    .code_loop:
      DUP
      ASZ
      LDL $subidx
      IEQ .code_end

      DUP
      LDL $subidx
      ALD

      DUP
      LD0
      TLD
      LDC op_byte_size
      IVK int.to_bytes 2

      LDL $buffer
      IIN .first_buffer_push
        LDL $buffer
        SWP
        ADD ; Overloaded add, assumes Python
      .first_buffer_push:
      STL $buffer

      DUP
      LDL $subidx
      SWP ; Stash subidx on the stack
      LD1
      TLD

      ST0 $subidx
      .args_loop:
        DUP
        ASZ
        LDL $subidx
        IEQ .args_end

        DUP
        LDL $subidx
        ALD

        DUP
        LDC arg_type_idx
        TLD
        LDC arg_literal
        IEQ .arg_is_literal

        DUP
        LDC arg_type_idx
        TLD
        LDC arg_ident
        IEQ .arg_is_ident

        JMP .args_next

        .arg_is_literal:
          DUP
          LDC arg_value_idx
          TLD
          LDC arg_byte_size
          IVK int.to_bytes 2

          LDL $buffer
          SWP
          ADD ; Overloaded add, assumes Python
          STL $buffer

          JMP .args_next

        .arg_is_ident:
          DUP
          LD1
          TLD
          STL $name

          LDL $name
          LD0
          ALD
          LDC dot
          INE .arg_ident_name_ok
            LDL $current
            LDL $name
            TNW 2
            STL $name
          .arg_ident_name_ok:

          LDL $labels
          LDL $name
          MCT
          INZ .arg_ident_is_label

          LDL $const_pool
          LDL $name
          MCT
          INZ .arg_ident_is_value

          LDL $code_pool
          LDL $name
          MCT
          INZ .arg_ident_is_code

          JMP .arg_ident_is_late_code

          .arg_ident_is_label:
            LDL $buffer
            LDL $labels
            LDL $name
            MLD
            LDC arg_byte_size
            IVK int.to_bytes 2
            ADD ; Overloaded, assumes Python
            STL $buffer

            JMP .args_next

          .arg_ident_is_value:
            LDL $buffer
            LDL $const_pool
            LDL $name
            MLD
            LDC arg_byte_size
            IVK int.to_bytes 2
            ADD ; Overloaded, assumes Python
            STL $buffer

            JMP .args_next

          .arg_ident_is_code:
            LDL $buffer
            LDL $code_pool
            LDL $name
            MLD
            LDC arg_byte_size
            IVK int.to_bytes 2
            ADD
            STL $buffer

            JMP .args_next

          .arg_ident_is_late_code:
            LDL $buffer
            LDL $code_pool
            MSZ
            LDC arg_byte_size
            IVK int.to_bytes 2
            ADD ; Overloaded add, assumes Python
            STL $buffer

            LDL $code_pool
            LDL $name
            LDL $code_pool
            MSZ
            MST

            JMP .args_next

      .args_next:
        POP

        LDL $subidx
        INC 1
        STL $subidx

        JMP .args_loop
      .args_end:

      POP ; Restore subidx
      STL $subidx

    .code_next:
      POP

      LDL $subidx
      INC 1
      STL $subidx

      JMP .code_loop
    .code_end:

    LDL $output
    LDC const_code
    LDL $code_pool
    LDL $current
    MLD
    TNW 2
    LD0
    LDL $buffer
    LD0
    ANW
    TNW 3
    TNW 2
    APS

    LDL $output
    LDC const_symbol
    LDL $current
    TNW 2
    LDC const_code
    LDL $code_pool
    LDL $current
    MLD
    TNW 2
    TNW 2
    APS

  .scnd_next:
    POP

    LDL $idx
    INC 1
    STL $idx

    JMP .scnd_loop
  .scnd_end:
  POP

  LDL $output
  RET
